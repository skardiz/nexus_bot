# discord_bot.py
import os
import discord
from discord import app_commands
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest
import random
import string

import database
import utils
import config

DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

intents = discord.Intents.default()
intents.voice_states = True
intents.presences = True
intents.members = True

client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)
telegram_bot = Bot(token=TELEGRAM_TOKEN)

voice_users, telegram_message_info = {}, {"message_id": None}
active_channel_link, last_voice_session_end_time = None, None
coming_soon_users = {}

@tree.command(name="link", description="–ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Steam –∏ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã.")
@app_commands.describe(steam_id="–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SteamID64 (–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ steamid.io)")
async def link_command(interaction: discord.Interaction, steam_id: str):
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    code_formatted = f"{code[:3]}-{code[3:]}"
    database.link_steam_account(interaction.user.id, steam_id)
    database.create_linking_code(code_formatted, interaction.user.id)
    try:
        await interaction.user.send(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –í–∞—à Steam-–∞–∫–∫–∞—É–Ω—Ç `{steam_id}` —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
            f"–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å Telegram, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤ Telegram –∫–æ–º–∞–Ω–¥—É `/confirm` —Å —ç—Ç–∏–º –∫–æ–¥–æ–º:\n\n"
            f"**{code_formatted}**\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç."
        )
        await interaction.response.send_message("‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.", ephemeral=True)
    except discord.Forbidden:
        await interaction.response.send_message("‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°. –†–∞–∑—Ä–µ—à–∏—Ç–µ –ø—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.", ephemeral=True)

def add_coming_soon_user(user_id, user_name):
    if user_id in voice_users: return
    print(f"INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ '–°–∫–æ—Ä–æ –∑–∞–π–¥—É'.")
    expiration_time = datetime.now(utils.MOSCOW_TZ) + timedelta(minutes=30)
    coming_soon_users[user_id] = {"name": user_name, "expires_at": expiration_time}

async def repost_message():
    global telegram_message_info
    if telegram_message_info.get("message_id"):
        try: await telegram_bot.delete_message(TELEGRAM_CHAT_ID, telegram_message_info["message_id"])
        except BadRequest: pass
    telegram_message_info["message_id"] = None
    await send_or_edit_message(force_creation=True)

async def format_telegram_message():
    global coming_soon_users
    now = datetime.now(utils.MOSCOW_TZ)
    lines = ["üéß **–°–µ–π—á–∞—Å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ:**"] if voice_users else ["üé§ **–í –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æ.**"]
    
    for uid, data in sorted(voice_users.items(), key=lambda i: i[1]['join_time']):
        coming_soon_users.pop(uid, None)
        tg_id = database.get_telegram_id_by_discord_id(uid)
        link = f"[{utils.escape_markdown(data['name'])}](tg://user?id={tg_id})" if tg_id else utils.escape_markdown(data['name'])
        dur = utils.format_duration((now - data['join_time']).total_seconds())
        stat = "".join([" üé•" if data.get('video') else "", " üî¥" if data.get('streaming') else ""])
        game = data.get('game', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        game_url = utils.get_steam_app_url(game)
        game_str = f" (–∏–≥—Ä–∞–µ—Ç –≤ [{utils.escape_markdown(game)}]({game_url}))" if game_url else (f" (–∏–≥—Ä–∞–µ—Ç –≤ *{utils.escape_markdown(game)}*)" if game != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "")
        lines.append(f"‚Ä¢ {link}{stat} - {dur}{game_str}")
    
    if voice_users: lines.append("")
    
    expired_users = [uid for uid, data in coming_soon_users.items() if now > data['expires_at']]
    for uid in expired_users:
        print(f"INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {coming_soon_users[uid]['name']} —É–¥–∞–ª–µ–Ω –∏–∑ '–°–∫–æ—Ä–æ –∑–∞–π–¥—É' –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.")
        del coming_soon_users[uid]
        
    if coming_soon_users:
        lines.append("üö∂‚Äç‚ôÇÔ∏è **–°–∫–æ—Ä–æ –∑–∞–π–¥–µ—Ç:**")
        for uid, data in coming_soon_users.items():
            tg_id = database.get_telegram_id_by_discord_id(uid)
            link = f"[{utils.escape_markdown(data['name'])}](tg://user?id={tg_id})" if tg_id else utils.escape_markdown(data['name'])
            lines.append(f"‚Ä¢ {link}")
        lines.append("")

    today_stats = database.get_daily_stats(utils.get_day_start_time())
    users_in_voice_ids = set(voice_users.keys())
    filtered_today_stats = [s for s in today_stats if s[0] not in users_in_voice_ids]

    if filtered_today_stats:
        lines.append("üóì **–ë—ã–ª–∏ —Å–µ–≥–æ–¥–Ω—è:**")
        for uid, name, secs in filtered_today_stats:
            tg_id = database.get_telegram_id_by_discord_id(uid)
            link = f"[{utils.escape_markdown(name)}](tg://user?id={tg_id})" if tg_id else utils.escape_markdown(name)
            lines.append(f"‚Ä¢ {link} - {utils.format_duration(secs)}")
            
    return "\n".join(lines).strip()

async def send_or_edit_message(text_override=None, mode="main", force_creation=False):
    global telegram_message_info
    database.set_key_value('voice_users_count', len(voice_users))
    
    is_new_message_needed = not telegram_message_info.get("message_id")
    if is_new_message_needed and utils.is_quiet_hours() and not force_creation and not text_override and mode == "main":
        print("INFO: –¢–∏—Ö–∏–µ —á–∞—Å—ã. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–∞–≤–ª–µ–Ω–æ.")
        return

    keyboard = []
    # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ç—Ä–æ–≥–∞—è –ª–æ–≥–∏–∫–∞ –û–î–ù–û–ô –∫–Ω–æ–ø–∫–∏
    if mode == "main":
        if voice_users: # –ö–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤ –≤–æ–π—Å–µ
            keyboard.append([InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –°–∫–æ—Ä–æ –∑–∞–π–¥—É", callback_data='coming_soon')])

    elif mode == "daily_stats":
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É", callback_data='back_to_main')])
        day_start = utils.get_day_start_time()
        sessions = database.get_detailed_daily_sessions(day_start)
        if not sessions:
            text_override = "üìä **–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.**"
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            user_stats = defaultdict(lambda: {'total_seconds': 0, 'sessions': [], 'games': defaultdict(int), 'telegram_id': None})
            for user_id, name, telegram_id, start_str, duration, game in sessions:
                user_stats[name].update({'user_id': user_id, 'telegram_id': telegram_id})
                user_stats[name]['total_seconds'] += duration
                if duration >= 900:
                    start_time = datetime.fromisoformat(start_str)
                    user_stats[name]['sessions'].append(f"{start_time.strftime('%H:%M')}-{(start_time + timedelta(seconds=duration)).strftime('%H:%M')}")
                if game and game != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    user_stats[name]['games'][game] += duration
            
            lines = ["üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"]
            for name, data in user_stats.items():
                name_link = f"[{utils.escape_markdown(name)}](tg://user?id={data['telegram_id']})" if data['telegram_id'] else utils.escape_markdown(name)
                lines.append(f"üë§ {name_link}")
                lines.append(f"   - *–í—Å–µ–≥–æ –≤ –≤–æ–π—Å–µ:* {utils.format_duration(data['total_seconds'])}")
                if data['sessions']: lines.append(f"   - *–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã (–ú–°–ö):* {', '.join(data['sessions'])}")
                top_games = sorted(data['games'].items(), key=lambda item: item[1], reverse=True)
                if top_games:
                    games_str = ', '.join([f"[{utils.escape_markdown(g)}]({utils.get_steam_app_url(g)})" if utils.get_steam_app_url(g) else utils.escape_markdown(g) + f" ({utils.format_duration(t)})" for g, t in top_games])
                    lines.append(f"   - *–ò–≥—Ä–∞–ª –≤:* {games_str}")
                lines.append("")
            text_override = "\n".join(lines).strip()
            
    is_fully_inactive = not voice_users and not database.get_daily_stats(utils.get_day_start_time()) and not coming_soon_users
    if is_fully_inactive and mode == "main":
        if telegram_message_info.get("message_id"):
            print("INFO: –°–µ—Ä–≤–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è—é —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            try: await telegram_bot.delete_message(TELEGRAM_CHAT_ID, telegram_message_info["message_id"])
            except BadRequest: pass
            telegram_message_info["message_id"] = None
        return

    text = text_override or await format_telegram_message()
    markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    try:
        if not telegram_message_info.get("message_id"):
            msg = await telegram_bot.send_message(TELEGRAM_CHAT_ID, text, ParseMode.MARKDOWN, reply_markup=markup, disable_notification=True, disable_web_page_preview=True)
            telegram_message_info["message_id"] = msg.message_id
        else:
            await telegram_bot.edit_message_text(text, TELEGRAM_CHAT_ID, telegram_message_info["message_id"], parse_mode=ParseMode.MARKDOWN, reply_markup=markup, disable_web_page_preview=True)
        database.set_key_value('last_telegram_success', datetime.now(utils.MOSCOW_TZ).isoformat())
    except BadRequest as e:
        if "message is not modified" not in str(e).lower():
            print(f"ERROR: –û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            telegram_message_info["message_id"] = None
            await asyncio.sleep(1)
            await send_or_edit_message(text, mode=mode, force_creation=True)
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        telegram_message_info["message_id"] = None

async def check_achievements(uid, name):
    stats = database.get_user_stats(uid)
    if not stats: return
    for required_seconds, achievement_name in config.ACHIEVEMENTS.items():
        if stats[0] >= required_seconds and database.grant_achievement(uid, achievement_name):
            print(f"INFO: –í—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∞—á–∏–≤–∫–∞ '{achievement_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name}")
            await telegram_bot.send_message(
                TELEGRAM_CHAT_ID,
                f"üéâ **–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!**\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{utils.escape_markdown(name)}** –æ—Ç–∫—Ä—ã–ª –∞—á–∏–≤–∫—É: **{achievement_name}**",
                parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
            )
            database.set_key_value('last_telegram_success', datetime.now(utils.MOSCOW_TZ).isoformat())

async def update_user_status(member) -> bool:
    if member.id not in voice_users: return False
    old_status = {k: voice_users[member.id].get(k) for k in ('game', 'streaming', 'video')}
    steam_id = database.get_steam_id(member.id)
    game = next((a.name for a in member.activities if a.type == discord.ActivityType.playing), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    steam_game = utils.get_game_from_steam(steam_id)
    if steam_game:
        database.set_key_value('last_steam_success', datetime.now(utils.MOSCOW_TZ).isoformat())
    new_status = {
        'name': member.display_name, 'game': steam_game or game,
        'streaming': member.voice.self_stream if member.voice else False,
        'video': member.voice.self_video if member.voice else False
    }
    voice_users[member.id].update(new_status)
    return any(old_status[key] != new_status.get(key) for key in old_status)

@client.event
async def on_ready():
    global active_channel_link, last_voice_session_end_time, voice_users
    await tree.sync()
    client.loop.create_task(utils.fetch_steam_app_list_to_db())
    print("--- [RE]CONNECT: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ë–î... ---")
    database.set_key_value('last_discord_success', datetime.now(utils.MOSCOW_TZ).isoformat())
    
    voice_users.clear()
    stored_sessions = database.get_all_active_sessions()
    all_voice_members = {m.id: m for g in client.guilds for m in g.members if m.voice}

    for user_id, join_time in stored_sessions:
        if user_id in all_voice_members:
            member = all_voice_members[user_id]
            voice_users[user_id] = {"name": member.display_name, "join_time": join_time}
            await update_user_status(member)
        else:
            print(f"INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª, –ø–æ–∫–∞ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω.")
            ended_session_join_time = database.end_active_session(user_id)
            if ended_session_join_time:
                duration = (datetime.now(utils.MOSCOW_TZ) - ended_session_join_time).total_seconds()
                database.add_voice_session(user_id, ended_session_join_time, duration, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    for member_id, member in all_voice_members.items():
        if member_id not in voice_users:
            print(f"INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.display_name} –∑–∞—à–µ–ª, –ø–æ–∫–∞ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω.")
            now = datetime.now(utils.MOSCOW_TZ)
            voice_users[member_id] = {"name": member.display_name, "join_time": now}
            database.start_active_session(member_id, now)
            await update_user_status(member)

    active_channel_link = None
    if voice_users:
        first_user_id = next(iter(voice_users))
        if all_voice_members.get(first_user_id) and all_voice_members[first_user_id].voice:
             active_channel_link = f"https://discord.com/channels/{all_voice_members[first_user_id].guild.id}/{all_voice_members[first_user_id].voice.channel.id}"

    print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í –≤–æ–π—Å–µ: {len(voice_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await send_or_edit_message(force_creation=True)
    client.loop.create_task(periodic_updater())

@client.event
async def on_voice_state_update(member, before, after):
    global active_channel_link, last_voice_session_end_time
    database.set_key_value('last_discord_success', datetime.now(utils.MOSCOW_TZ).isoformat())
    if member.bot: return
    now = datetime.now(utils.MOSCOW_TZ)
    
    if not before.channel and after.channel:
        print(f"EVENT: {member.display_name} –∑–∞—à–µ–ª –≤ –∫–∞–Ω–∞–ª.")
        database.start_active_session(member.id, now)
        voice_users[member.id] = {"name": member.display_name, "join_time": now}
        await update_user_status(member)
        if len(voice_users) == 1:
            active_channel_link = f"https://discord.com/channels/{member.guild.id}/{after.channel.id}"
            
        current_voice_count = len(voice_users)
        if config.MENTION_THRESHOLD > 0 and current_voice_count == config.MENTION_THRESHOLD:
            print(f"INFO: –ü–æ—Ä–æ–≥ –≤ {config.MENTION_THRESHOLD} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –û—Ç–ø—Ä–∞–≤–ª—è—é —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            mention_text = f"üó£Ô∏è –í –≥–æ–ª–æ—Å–æ–º —á–∞—Ç–µ –∫–æ–º–ø–∞–Ω–∏—è! {config.MENTIONS}"
            try:
                await telegram_bot.send_message(
                    TELEGRAM_CHAT_ID, text=mention_text, disable_notification=False
                )
            except Exception as e:
                print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
                
        await send_or_edit_message()

    elif before.channel and not after.channel:
        print(f"EVENT: {member.display_name} –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        join_time = database.end_active_session(member.id)
        if join_time:
            duration = (now - join_time).total_seconds()
            game_name = voice_users.get(member.id, {}).get('game', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            database.add_voice_session(member.id, join_time, duration, game_name)
            database.update_stats(member.id, member.display_name, duration, game_name)
            await check_achievements(member.id, member.display_name)
        
        voice_users.pop(member.id, None)
        
        if not voice_users:
            last_voice_session_end_time = now
            active_channel_link = None
        await send_or_edit_message()
    
    elif before.channel and after.channel and before.channel != after.channel:
        if len(voice_users) == 1:
            active_channel_link = f"https://discord.com/channels/{member.guild.id}/{after.channel.id}"
            await send_or_edit_message()

@client.event
async def on_presence_update(before, after):
    if after.id in voice_users and await update_user_status(after):
        await send_or_edit_message()

async def periodic_updater():
    while True:
        await asyncio.sleep(60)
        await send_or_edit_message()

async def run():
    print("--- –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞... ---")
    database.set_key_value('start_time', datetime.now(utils.MOSCOW_TZ).isoformat())
    try:
        await client.start(DISCORD_TOKEN)
    finally:
        await client.close()
