# telegram_bot.py (The Absolute Final, "Network Stats" Version)
import os
import psutil
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest
import asyncio

import database
import utils
import config

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_USER_IDS = [int(admin_id) for admin_id in os.getenv('ADMIN_USER_IDS', '').split(',') if admin_id]
app_instance = None 

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def delete_message_job(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    try:
        await context.bot.delete_message(chat_id=job_data['chat_id'], message_id=job_data['message_id'])
    except Exception:
        pass

async def edit_countdown_job(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    base_text = job_data['base_text']
    remaining_time = job_data['remaining_time']
    footer = f"\n\n*üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥...*"
    try:
        await context.bot.edit_message_text(
            text=base_text + footer,
            chat_id=job_data['chat_id'],
            message_id=job_data['message_id'],
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
    except BadRequest:
        pass

async def send_and_animate_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, parse_mode=None):
    footer = "\n\n*üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...*"
    chat_id = update.message.chat_id
    sent_message = await context.bot.send_message(
        chat_id=chat_id,
        text=text + footer,
        parse_mode=parse_mode,
        disable_web_page_preview=True
    )
    
    try:
        await update.message.delete()
    except Exception:
        pass

    if context.job_queue:
        base_data = {'chat_id': sent_message.chat_id, 'message_id': sent_message.message_id, 'base_text': text}
        context.job_queue.run_once(edit_countdown_job, 30, data={**base_data, 'remaining_time': 30})
        context.job_queue.run_once(edit_countdown_job, 50, data={**base_data, 'remaining_time': 10})
        context.job_queue.run_once(delete_message_job, 60, data={'chat_id': sent_message.chat_id, 'message_id': sent_message.message_id})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
async def refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from discord_bot import rescan_all_voice_users
    query = update.callback_query
    await query.answer("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    asyncio.create_task(rescan_all_voice_users())

async def daily_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from discord_bot import send_or_edit_message
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    asyncio.create_task(send_or_edit_message(mode="daily_stats"))

async def back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from discord_bot import send_or_edit_message
    query = update.callback_query
    await query.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É...")
    asyncio.create_task(send_or_edit_message(mode="main"))

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_and_animate_delete(update, context, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

async def up_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from discord_bot import repost_message
    await update.message.delete()
    asyncio.create_task(repost_message())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = ("üìú *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
                 "`/time` - –ó–∞–ª —Å–ª–∞–≤—ã\n"
                 "`/games` - –¢–æ–ø-5 –∏–≥—Ä\n"
                 "`/mystats` - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                 "`/king` - '–ö–æ—Ä–æ–ª—å –≤–æ–π—Å–∞'\n"
                 "`/status` - (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
                 "`/up` - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ")
    await send_and_animate_delete(update, context, help_text, parse_mode=ParseMode.MARKDOWN)

async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_users = database.get_top_users()
    text = "üèÜ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–∏–¥–µ–ª –≤ –≤–æ–π—Å–µ."
    if top_users:
        lines = ["*üèÜ –ó–∞–ª —Å–ª–∞–≤—ã (–¢–æ–ø-15):*\n"]
        for i, (name, secs, telegram_id) in enumerate(top_users, 1):
            user_link = f"[{name}](tg://user?id={telegram_id})" if telegram_id else name
            lines.append(f"*{i}.* {user_link} - {utils.format_duration(secs)}")
        text = "\n".join(lines)
    await send_and_animate_delete(update, context, text, parse_mode=ParseMode.MARKDOWN)

async def games_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_games = database.get_top_games()
    text = "üéÆ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª –≤ –∏–≥—Ä—ã."
    if top_games:
        lines = ["*üéÆ –¢–æ–ø-5 –∏–≥—Ä —Å–µ—Ä–≤–µ—Ä–∞:*\n"]
        for i, (name, secs) in enumerate(top_games, 1):
            url = utils.get_steam_app_url(name)
            game_link = f"[{name}]({url})" if url else name
            lines.append(f"*{i}.* {game_link} - {utils.format_duration(secs)}")
        text = "\n".join(lines)
    await send_and_animate_delete(update, context, text, parse_mode=ParseMode.MARKDOWN)

async def king_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    king = database.get_weekly_king()
    text = f"üëë –ù—ã–Ω–µ—à–Ω–∏–π –∫–æ—Ä–æ–ª—å –≤–æ–π—Å–∞: *{king[0]}*!" if king else "üëë –¢—Ä–æ–Ω –∫–æ—Ä–æ–ª—è –ø–æ–∫–∞ —Å–≤–æ–±–æ–¥–µ–Ω!"
    await send_and_animate_delete(update, context, text, parse_mode=ParseMode.MARKDOWN)

async def mystats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    discord_id = database.get_discord_id_by_telegram_id(update.effective_user.id)
    text = "‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω."
    if discord_id:
        stats = database.get_user_stats(discord_id)
        if not stats:
            text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        else:
            secs, name = stats
            achievements = database.get_user_achievements(discord_id)
            lines = [f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}:*\n", f"*–û–±—â–µ–µ –≤—Ä–µ–º—è:* {utils.format_duration(secs)}"]
            if achievements:
                lines.append("\n*–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*")
                lines.extend([f"üèÖ {ach}" for ach in achievements])
            top_user_games = database.get_top_games_for_user(discord_id, limit=3)
            if top_user_games:
                lines.append("\n*–õ—é–±–∏–º—ã–µ –∏–≥—Ä—ã:*")
                for game_name, game_secs in top_user_games:
                    url = utils.get_steam_app_url(game_name)
                    game_link = f"[{game_name}]({url})" if url else game_name
                    lines.append(f"‚Ä¢ {game_link} - {utils.format_duration(game_secs)}")
            text = "\n".join(lines)
    await send_and_animate_delete(update, context, text, parse_mode=ParseMode.MARKDOWN)

async def confirm_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥. `/confirm ABC-123`"
    if context.args:
        discord_id = database.find_discord_id_by_code(context.args[0].upper())
        if not discord_id:
            text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥."
        else:
            database.link_telegram_account(discord_id, update.effective_user.id)
            database.delete_linking_code(context.args[0].upper())
            text = "‚úÖ –£—Å–ø–µ—Ö! –ê–∫–∫–∞—É–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã."
    await send_and_animate_delete(update, context, text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from discord_bot import client as discord_client
    if update.effective_user.id not in ADMIN_USER_IDS:
        await update.message.delete()
        return

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    start_time_iso = database.get_key_value('start_time')
    start_time = datetime.fromisoformat(start_time_iso) if start_time_iso else datetime.now(utils.MOSCOW_TZ)
    uptime = utils.format_duration((datetime.now(utils.MOSCOW_TZ) - start_time).total_seconds())
    
    process = psutil.Process(os.getpid())
    cpu_usage = process.cpu_percent(interval=0.1)
    ram_usage = process.memory_info().rss / (1024 * 1024)
    
    # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
    net_io = psutil.net_io_counters()
    net_sent = net_io.bytes_sent / (1024 * 1024)
    net_recv = net_io.bytes_recv / (1024 * 1024)
    
    db_size = os.path.getsize(database.DB_FILE) / (1024 * 1024)
    total_voice_time = utils.format_duration(database.get_total_voice_time())

    discord_ping = round(discord_client.latency * 1000)
    telegram_ping = await utils.measure_telegram_ping()
    steam_ping = await utils.measure_steam_ping()
    
    now = datetime.now(utils.MOSCOW_TZ)
    def format_last_seen(key):
        last_seen_iso = database.get_key_value(key)
        if not last_seen_iso: return "–Ω–∏–∫–æ–≥–¥–∞"
        last_seen_time = datetime.fromisoformat(last_seen_iso)
        delta = (now - last_seen_time).total_seconds()
        return f"{int(delta)} —Å–µ–∫. –Ω–∞–∑–∞–¥" if delta < 60 else utils.format_duration(delta) + " –Ω–∞–∑–∞–¥"

    last_discord = format_last_seen('last_discord_success')
    last_telegram = format_last_seen('last_telegram_success')
    last_steam = format_last_seen('last_steam_success')

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    lines = [
        "ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)*",
        "",
        "**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:**",
        f"- –ê–ø—Ç–∞–π–º: {uptime}",
        f"- –ù–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage:.1f}%",
        f"- –ü–∞–º—è—Ç—å RAM: {ram_usage:.2f} –ú–ë",
        f"- –°–µ—Ç—å (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ): {net_sent:.2f} –ú–ë",
        f"- –°–µ—Ç—å (–ø–æ–ª—É—á–µ–Ω–æ): {net_recv:.2f} –ú–ë",
        "",
        "**API:**",
        f"- Discord: {discord_ping} –º—Å, {last_discord}",
        f"- Telegram: {int(telegram_ping)} –º—Å, {last_telegram}" if telegram_ping !=-1 else "- Telegram: –û—à–∏–±–∫–∞",
        f"- Steam: {int(steam_ping)} –º—Å, {last_steam}" if steam_ping != -1 else "- Steam: –û—à–∏–±–∫–∞",
        "",
        "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**",
        f"- –†–∞–∑–º–µ—Ä –ë–î: {db_size:.2f} –ú–ë",
        f"- –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –≤–æ–π—Å–µ: {total_voice_time}"
    ]
    await send_and_animate_delete(update, context, "\n".join(lines), parse_mode=ParseMode.MARKDOWN)

async def run():
    global app_instance
    app_instance = Application.builder().token(TELEGRAM_TOKEN).build()
    
    handlers = [CommandHandler(cmd, func) for cmd, func in [
        ("start", start), ("help", help_command), ("time", time_command),
        ("games", games_command), ("king", king_command), ("mystats", mystats_command),
        ("confirm", confirm_command), ("status", status_command), ("up", up_command)
    ]] + [
        CallbackQueryHandler(refresh_callback, pattern='^refresh$'),
        CallbackQueryHandler(daily_stats_callback, pattern='^daily_stats$'),
        CallbackQueryHandler(back_to_main_callback, pattern='^back_to_main$')
    ]
    
    app_instance.add_handlers(handlers)
    
    print("‚úÖ –ë–æ—Ç Telegram –û–ù–õ–ê–ô–ù.")
    await app_instance.initialize()
    await app_instance.start()
    await app_instance.updater.start_polling()
